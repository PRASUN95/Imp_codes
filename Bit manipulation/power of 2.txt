#include <stdio.h>
 
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n, flag = 0, i, j, x;
        scanf("%d",&n);
        int arr[n],m;
        for(i = 0; i < n; i++)
        {
            scanf("%d",&arr[i]);
            
        }
        for(i = 0; i < n; i++)
        {
            x = arr[i];
            
            if(x & x-1 == 0 && x > 0)
            {
                flag++;
            }
            for(j = i; j < n; j++)
            {
                if((x & arr[j]) == 0)
                {
                    continue;
                }
                else{
                    x = x & arr[j];
                }
                
                if((x & x-1) == 0 && x > 0)
                {
                    flag++;
                    
                }
                
            }
        }
        if(flag >= 1){
            printf("YES\n");
        }
        else{
            printf("NO\n");
        }
    }
    
    return 0;
}
Language: C





Detailed Editorial - So here we are going to start exploring, what was inside the problem.
Here we are trying to find a set in which if perform AND operation on all of its elements 
give a power of 2 like 1,2,4,8,16 etc. A power of 2 is the unique property in bit-system, 
that it contains only 1 bit to be set. So binary representation of 16 is { 1000 }. 
Also we know in 32-bit system, the set- bit can be found at positions { 0,1,2,3,...,31}.

Base case - If there is only one element in the array , 
so check only that whether it is a power of 2 or not,which is an easy task.

Second and Final case - Here we will search a position, 
at which all elements in the set has bit - set at that position.
for example - consider elements in the set are {4,6,7} . 
The binary representation of 4 , 6 and 7 are as ..4 - {100}, 6 - {110} and 7 - {111}. 
So,at position 2 {from right to left, we considers 0-based indexing always in bit-set},
 in all elements, bit is set. So doing AND on {4,6,7} gives 4 which is a power of 2.



#include <bits/ stdc++. h>

using namespace std;

#define ll long long int

#define sc1ll(x) cin>>x

vector arr(100001);

bool pow_2(ll num) //check for power of 2 or not

{ return (num&&!(num&(num-1))); }

int main() {

ll ans,test,i,j,num,maxx,minn,total=0;
for(int i=0;i<32;i++)
    total+=(1<<i);
sc1ll(test);
while(test--)
{
    sc1ll(num);
    for(i=0;i<num;i++)
        sc1ll(arr[i]);
    if(num==1) // if there is only one element in the set
    {
        if(pow_2(arr[0])) // check for power of 2
            printf("YES\n");
        else
            printf("NO\n");
        continue;
    }
    bool flag=false;
    for(int i=0;i<32;i++) //check all the positions at which the bit is set.
    {
        ans=total;
        for(int j=0;j<num;j++) 
        {
            if(arr[j]&(1<<i)) // include all those elements whose i'th bit is set
                ans=ans&arr[j];
        }
        if(pow_2(ans))//check for the set contains elements make a power of 2 or not
        {
            flag=true;
            break;
        }
    }
    if(flag==true)
        printf("YES\n");
    else
        printf("NO\n");
}
}

