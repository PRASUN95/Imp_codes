#include<iostream>
#include<string>
using namespace std;

const int MOD = 1000000007;
string num;
int save[200001];

void init()
{
	save[1] = 1;
	for (int i = 2; i <= 200000; i++)
		save[i] = ((long long)save[i - 1] * 10 + 1) % MOD;
}

int main()
{
	init();
	string num;
	cin >> num;
	int n = (int)num.size();
	int ans = 0;
	for (int i = 1; i <= n; i++)
	{
		int digit = num[i - 1] - '0';
		ans = ((long long)digit * i * save[n - i + 1] + ans) % MOD;
	}
	cout << ans << endl;
	return 0;
}


***************************************************
ALTERNATIVE APPROACH
***************************************************

A brute force approach to solve this problem is to generate all possible sub-strings of the given number. In the worst case scenario, for generating all possible sub-strings for N of size 2 * 105, it would take
len(N) * (len(N) + 1) / 2 
which is about 10^10 operations.
There is an efficient dynamic programming approach which can solve this problem in linear time with respect to the given number.
Let's look at the algorithm for N = 5312,
all possible substrings are
5 3 1 2 53 31 12 531 312 5312
with a little bit of rearrangement,
5 | 3 53 | 1 31 531 | 2 12 312 5312
The above rearrangement lists all numbers that ends with 5, 3, 1 and 2 respectively.
Let sd[i] hold the sum of all digits that ends at N[i] i.e.,
sd[0] holds the sum of all digits that ends at N[0] = 5 
sd[1] holds the sum of all digits that ends at N[1] = 3 
sd[2] holds the sum of all digits that ends at N[2] = 1 
sd[3] holds the sum of all digits that ends at N[3] = 2
If S is the final answer, then we have
S = sd[0] + sd[1] + sd[2] + sd[3] 
ie., S = ? sd[i] ? 0 = i < len(N)
Now, given sd[i], let us see if we can calculate sd[i+1].
sd[2] = 1 + 31 + 531 = 563
sd[3] = 2 + 12 + 312 + 5312
sd[3] = 2 + 10 + 2 + 310 + 2 + 5310 + 2
sd[3] = 4 * 2 + 10 * (1 + 31 + 531 )
sd[3] = (3 + 1) * *N[3]* + 10 * *sd[2]*
on generalising, we get
sd[i+1] = (i + 2) * N[i] + 10 * sd[i]
sd[0] = N[0]
As S can be large, we can use modulo equivalence at every step ( Why? ) and print S % 109 + 7. This process takes O(len(N)) where len(N) is the size of the input.
#include<bits/stdc++.h>

using namespace std;
typedef unsigned long long LL;

#define MOD7 1000000007


string str;

int main()
{

    cin>>str;
    int l = str.length();
    LL outp = str[0] - '0'; // output stored in it.
    LL temp = str[0] - '0'; // sum of all strings ending at index i is stored in this string
    for(int i=1 ; i< l ; i++)
    {
        temp = temp*10 + (i+1)*(str[i] - '0');
        temp = temp%MOD7;
        outp = (outp +temp)%MOD7;
    }
        cout<<outp<<endl;
    }
    return 0;
}


***************************************************
ALTERNATIVE APPROACH
***************************************************


#include <iostream>
#include <string.h>
using namespace std;

#define MOD 1000000007

int main() {
	char num[200005];
	gets(num);
	int len = strlen(num);
	long long factor = 1, ans = 0;

	for (int i = len-1; i >= 0; --i) {
		long long tmp = (num[i]-'0') * (i+1) * factor % MOD;
		ans += tmp;
		ans %= MOD;
		factor = (factor * 10 + 1) % MOD;
	}
	printf("%d\n", ans);

	return 0;
}