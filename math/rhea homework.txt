#ifndef _MSC_VER
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#pragma GCC target("avx,tune=native")
#endif
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <unordered_map>
#include <map>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <functional>
#include <set>
#include <sstream>
 
using namespace std;
 
#ifdef _MSC_VER
#  include <intrin.h>
#  define __builtin_popcount __popcnt
#  define putchar_unlocked putchar
#  define getchar_unlocked getchar
#endif
#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))
#define FI(i,s,n) for(i=s;i<=n;i++)
#define FD(i,n,s) for(i=n;i>=s;i--)
#define SLL(a) scanf("%lld", &a)
#define SI(a) scanf("%d", &a)
#define SCC(a) scanf(" %c", &a)
#define SSTR(a) scanf("%s", a)
#define NL() puts("");
#define PLL(a) printf("%lld ", a)
#define PI(a) printf("%d ", a)
#define PLLN(a) printf("%lld\n", a)
#define PIN(a) printf("%d\n", a)
//#define PIN(a) printf("%d\n", a)
#define PCC(a) printf("%c", a)
#define PSTR(a) printf("%s ", a)
#define PSTRN(a) printf("%s\n", a)
#define ZF(a) memset(a, 0, sizeof(a))
#define PC(x) putchar_unlocked(x)
#define GC(x) getchar_unlocked(x)
 
#define MP make_pair
#define PB push_back
 
#define MA 1000000000000000000 // 1e18
//#define MA 1000000000000000LL // 1e15
#define M  1000000007
#define MM 2000000033
#define N  100005
#define K  1000005
 
typedef long long ll;
typedef long double ld;
 
typedef struct { ll x, y; } ll2;
typedef struct { ll x, y, z; } node;
typedef vector<ll> vll;
typedef vector<ll2> vll2;
typedef pair<int, int> pi;
#define X first
#define Y second
 
#define getc getchar_unlocked
int read() {
	int ans = 0; bool minus = false; char c;
	while (!isdigit(c = getc())) if (c == '-') minus = true;
	while (isdigit(c)) ans = (ans << 3) + (ans << 1) + (c - '0'), c = getc();
	return minus ? -ans : ans;
}
 
int n, m;
ll a[N];
ll b[N];
ll c[26];
 
//vector<int> v[N];
//priority_queue<pi> pq;
 
ll modpow(ll a, ll b, ll m) {
	ll r = 1;
	a = a%m;
	while (b>0) {
		if (b % 2 == 1) r = r*a % m;
		a = a*a % m;
		b = b >> 1;
	}
 
	return r;
}
 
ll combi(int n, int k) {
	ll x = a[n];
	ll y = b[n - k] * b[k] % M;
 
	return x * y % M;
}
 
int main() {
	int t = 1;
	int i, j, k, w, x, y, z, p, q;
	int x2, y2, z2, l, r, h, s;
 
	char ss[N];
	//t = read();
 
	a[0] = 1; b[0] = 1;
	FI(i, 1, N - 1) {
		a[i] = a[i - 1] * i % M;
		b[i] = modpow(a[i], M - 2, M);
	}
 
	while (t--) {
		SSTR(ss);
		n = strlen(ss);
		for (i = 0; ss[i]; i++) {
			c[ss[i] - 'a']++;
		}
 
		FI(i, 0, 25) {
			if (c[i]) {
				ll rr = a[n - 1];
				FI(j, 0, 25) {
					if (i == j) rr = rr * b[c[j] - 1] % M;
					else rr = rr * b[c[j]] % M;
				}
				PLL(rr);
			}
			else
				printf("0 ");
		}
		NL();
	}
}
Language: C++











// 	editorial	




#include <iostream>
#include <vector>
using namespace std;

#define MOD 1000000007

vector<long long int>fact(100001);
void store_factorial(int n)
{
    fact[0]=fact[1]=1;
    for(int i=2;i<=n;i++)
    {
        fact[i]=(fact[i-1]*i)%MOD;
    }
}

long long modular_exponentiation(long long base, long long power)
{
    long long result=1;
    while(power >0)
    {
        if(power&1)
        {
            result=(result*base)%MOD;
        }

        power=power/2;
        base=(base*base)%MOD;
    }
    return result;
}

long long inverse_modulo(long long num, long long mod)
{
    return modular_exponentiation(num, mod-2);
}

int main()
{
    string s;
    cin>>s;

    vector<int>hash(26,0);
    for(char c:s)
    {
        hash[c-'a']++;
    }

    int l=s.length();
    store_factorial(l-1);
    vector<long long>ans(26,0);

    for(int i=0;i<26;i++)
    {
        if(hash[i]>0)
        {
            hash[i]--;
            ans[i]=fact[l-1];
            for(int j=0;j<26;j++)
            {
                ans[i]=(ans[i]*inverse_modulo(fact[hash[j]], MOD))%MOD;
            }
            hash[i]++;
        }
    }

    for(int val:ans)
    cout<<val<<" ";
    return 0;
}