https://www.hackerearth.com/practice/math/number-theory/basic-number-theory-1/practice-problems/algorithm/lucky-string-jackpot-1/





In this problem, you are obviously not supposed to generate the whole string.

You just have to count the maximum consecutive 4's appearing in the string. What you have to do is just find out the pattern.

String of length 1 -> 4 5
String of length 2 -> 44 45 54 55
String of length 3 -> 444 445 454 455 544 545 554 555
Here,

If your n takes you to a string of length 3, your answer is atleast 3
If your n covers first 4 "4's" from the string of length 3, your answer is 4
If your n covers atleast first 5 "4's" from the string of length 3, your answer is 5
For a given value of "n", to find out upto which string length you will be printing :-

Cumulatively,

Strings of length 1 have 1 * 2^1 characters
Strings of length 2 have 2 * 2^2 characters
And in general

Strings of length k have n * 2^k characters
So the problem reduces to finding that to which string lengths, the given "n" belongs to. This can be done using a simple loop.

    sofar = 1
    i = 1
    while( sofar + i*powStored[i] <= n ) {
        sofar += i*powStored[i];
        i++;
    }
Here, powStored[i] = 2^i.

Since at each step you are adding 2^i and incrementing i, the total time taken is O(log (n)).







#include <stdio.h>
#include<algorithm>
using namespace std;
int main() 
{
	int test;
	scanf("%d",&test);
	while(test--)
	{
		long long int N,ans;
		scanf("%lld",&N);
		long long int count=1,power2=2,prev_sum=0,sum=2,diff;
		while(sum<N)
		{
			prev_sum=sum;
			power2=power2*2;
			count++;
			sum+=power2*count;
		}
		if(sum==N)
			printf("%lld\n",2*count-1);
		else 
		{
			long long int POS=prev_sum+((2*count)-1);
			if(N>=POS)
				printf("%lld\n",2*count-1);
			else{
				diff=POS-N;
				ans=(max(2*(count-1)-1,(2*(count)-1)-diff));
				printf("%lld\n",ans);
			}
		}
	}
	return 0;
}
Language: C++


