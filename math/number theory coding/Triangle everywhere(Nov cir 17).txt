MY SOLUTION:-----

#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define ll long long
 
map<ll,ll> mp;
    
ll triangle(ll n)
{
    if(mp.count(n)>0)return mp[n];
    if(n == 0)
    return 1;
    if(n == 1)return 5;
    return mp[n] =  ((triangle(n-1)*3)%mod + 2)%mod;
}
int main()
{
    int t,n;
    cin >> t;
    while(t--)
    {
        cin >> n;
        ll res = triangle(n);
        cout << res % mod << endl;
    }
    return 0;
}
Language: C++



EDITORIAL:-----


#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
long long answer[1000002];
int main()
{
//	freopen("qn1b.txt","r",stdin);
//	freopen("solution1b.txt","w",stdout);
	answer[0]=1;
	for(int i=1;i<=1000000;i++)
	{
		answer[i]=answer[i-1]*3+2;
		answer[i]=answer[i]%mod;
	}
	int q,m;
	cin>>q;
	while(q--)
	{
		cin>>m;
		cout<<answer[m]<<endl;
	}
}

Alternative:-

My idea for computing this problem is simple, for the given n, we just calculate the (2* (3^n)) -1. 
it works for all the test cases .

#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ll unsigned long long
#define mod 1000000007
using namespace std;
int fast_pow(long long base, long long n,long long M) 
{
if(n==0)
return 1;
if(n==1)
return base;
long long halfn=fast_pow(base,n/2,M);
if(n%2==0)
return ( halfn * halfn ) % M;
else
return ( ( ( halfn * halfn ) % M ) * base ) % M;
}
int findMMI_fermat(int n,int M)
{
return fast_pow(n,M-2,M);
}

void fastscan(ll &x)
{
bool neg=false;
register int c;
x =0;
c=getchar();
if(c=='-')
{
neg = true;
c=getchar();
}
for(;(c>47 && c<58);c=getchar())
x = (x<<1) + (x<<3) +c -48;
if(neg)
x *=-1;
}







int main()
{
ios_base::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
ll t;
fastscan(t);
while(t--)
{
ll n;
fastscan(n);
ll x = fast_pow(3,n,mod);
ll total = (((x%mod)-(1%mod))%mod)*(findMMI_fermat(2,mod)%mod)%mod;

ll ans = (((total%mod)*(4%mod))%mod + (1%mod))%mod;
cout<<ans%mod<<endl;
}


return 0;
}