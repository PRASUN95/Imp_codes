#include<bits/stdc++.h>
using namespace std;
int main()
{
int n,m,t,x,flag,i,k=0;
cin>>n>>m;
vector<pair<int,int> >a;
for(i=0;i<n*m;i++)
{ 
cin>>x;
k=i/m;
a.push_back(make_pair(x,k));
}
cin>>t;
while(t--)
{
cin>>x;
flag=0;
for(i=0;i<n*m;i++)
{
if(a[i].first==x)
{
flag=1;
break;
}
 
}
if(flag==1)
cout<<a[i].second<<" "<<i%m<<"\n";
else
cout<<"-1 -1\n";
}
return 0;
}
Language: C++





#include<iostream>
#include<cstdio>
#define gc getchar_unlocked
 
void scanint(int &x)
{
 register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;}
 
int a[1001][1001]={0};
int main()
{
int n,m;
 
int q,i,j,k;
scanint(n);scanint(m);
for(i=0;i<n;i++)for(j=0;j<m;j++)
{scanint(a[i][j]);}
 
scanint(q);
while(q--)
{
scanint(k);
i=0;j=m-1;
int f=0;
while(i<n&&j>=0)
{
if(a[i][j]==k){printf("%d %d\n",i,j);break;}
else if(a[i][j]>k)j--;
else i++;
}
if(i==n || j==-1)printf("-1 -1\n");
}
 
 
return 0;
}
Language: C++














Let's start searching from the bottom-left corner. If the number here is less than the query number X, 
then we can only go up. And if it is bigger, then we can only go right. (As both the columns and rows are sorted)
Traversing the array this way, we either find the element in max O(2n) steps, if it is present,
 or cross the boundary of the array, in which case the element is not present.
Please note, we can also start from the top-right corner.



import java.util.Scanner;
import java.util.Arrays;

class MindPalace    {
    public static void main(String[] args)  {
        Scanner scanner = new Scanner(System.in);
        int N, M, i, j;
        N = scanner.nextInt();
        M = scanner.nextInt();
        int[][] mindPalaceArray = new int[N][M];
        int[][] rowMinMax = new int[N][2];

        for(i = 0; i < N; i++)  {
            for(j = 0; j < M; j++)  {
                mindPalaceArray[i][j] = scanner.nextInt();
                if(j == 0)
                    rowMinMax[i][0] = mindPalaceArray[i][j];
                if(j == M - 1)
                    rowMinMax[i][1] = mindPalaceArray[i][j];
            }
        }


        int numQueries = scanner.nextInt();
        for(int numQuery = 0; numQuery < numQueries; numQuery++)    {
            int queryNumber = scanner.nextInt();
            boolean colFindFlag = false, rowFindFlag = false, mindPalaceFound = false;

            //Solution using Binary Search
            j = -1;
            for(i = 0; i < N && j < 0; i++) {
                j = Arrays.binarySearch(mindPalaceArray[i], queryNumber);
            }

            if(j >= 0)  {
                System.out.println(i-1 + " " + j);
            }
            else {
                System.out.println("-1 -1");
            }


            //Solution using Top Right corner
            /*
                int x=0, y=M-1;
                int X = queryNumber;
                int[][] A = mindPalaceArray;

                while(x < N && y >= 0 && A[x][y] != X)  {
                    if(A[x][y] > X) y--;
                    else if(A[x][y] < X)    x++;
                }

                if(y < 0 || x >= N) {
                    System.out.println("-1 -1");
                }
                else    {
                    System.out.println(x + " " + y);
                }
            */

            //Solution using Bottom Left corner
            /*
                int x = N-1, y = 0;
                int X = queryNumber;
                int[][] A = mindPalaceArray;

                while(x >= 0 && y < M && A[x][y] != X)  {
                    if(A[x][y] < X)     y++;
                    else if(A[x][y] > X)    x--;
                }

                if(y >= N || x < 0) {
                    System.out.println("-1 -1");
                }
                else    {
                    System.out.println(x + " " + y);
                }
            */
        }
    }
}


/*
    Solution using HashMap
*/

/*

import java.util.Scanner;
import java.util.HashMap;

class Point {
    public int x;
    public int y;

    public Point(int x, int y)  {
        this.x = x;
        this.y = y;
    }
}

class MindPalace    {
    public static void main(String[] args)  {
        Scanner scanner = new Scanner(System.in);
        int N, M;
        int number;
        HashMap mindPalace = new HashMap();
        N = scanner.nextInt();
        M = scanner.nextInt();

        for(int i = 0; i < N * M; i++)  {
            number = scanner.nextInt();
            mindPalace.put(number, new Point((i/M), (i%M)));
        }

        int numQueries = scanner.nextInt();
        Point mindPalaceLoc;
        for(int i = 0; i < numQueries; i++)     {
            int queryNumber = scanner.nextInt();
            mindPalaceLoc = (Point)mindPalace.get(queryNumber);
            if(mindPalaceLoc != null)
                System.out.println(mindPalaceLoc.x + " " + mindPalaceLoc.y);
            else
                System.out.println("-1 -1");
        }
    }
}
*/




#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<utility>
#include<queue>
#include<stack>
#include<string>
#include<cstring>
#include<map>
#define rep(i,N) for(int (i)=0;(i)<(N);(i)++)
#define repi(i,j,N) for(int (i)=(j);(i)<(N);(i)++)
#define repg(i,j,N) for((i)=(j);(i)<(N);(i)++)
#define si(i) scanf("%d",&(i))
#define sl(i) scanf("%lld",&(i))
#define pi(i) printf("%d",(i))
#define pl(i) printf("%lld",(i))
#define pin(i) printf("%d\n",(i))
#define pln(i) printf("%lld\n",(i))
#define pw    printf(" ");
#define pn    printf("\n");
using namespace std;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
#define sz(a) int((a).size()) 
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
int main()
{
  int N,M,A[1000][1000],Q,X,x,y;
  scanf("%d %d",&N,&M);
  rep(i,N)
  {
    rep(j,M)
    {
      scanf("%d",&A[i][j]);
    }
  }
  cin>>Q;
  rep(i,Q)
  {
    scanf("%d",&X);
    x=0;y=M-1;
    while(x<N&&y>=0&&A[x][y]!=X)
    {
      if(A[x][y]>X)
        y--;
      else if(A[x][y]<X)
        x++;
    }
    if(y<0||x>=N)
    {
      printf("-1 -1\n");
    }
    else
    {
      printf("%d %d\n",x,y);
    }
  }
  return 0;
}





#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<vector>
#include<cassert>
#include<set>
#include<queue>
#include<map>
using namespace std;
#define vi vector < int >
#define pb push_back
#define ll long long
#define llu unsigned long long
#define MOD 1000000007
#define INF 1000000000
#define dbg(x) { cout<< #x << ": " << (x) << endl; }
#define all(x) x.begin(),x.end()
int a[1001][1001];
void find(int val,int n,int m)
{
     int i,j;
     i=0;
     j=m-1;
     while(i<n && j>=0)
     {
        if(a[i][j]==val)
        {
           printf("%d %d\n",i,j);
           return;
        }
        if(a[i][j]>val)
        j--;
        else
        i++;
     }
     printf("-1 -1\n");
}
int main()
{
    int n,m,i,j;
    scanf("%d%d",&n,&m);
    assert(2<=n && n<=1000);
    assert(2<=m && m<=1000);
    for(i=0;i<n;i++)
    {
       for(j=0;j<m;j++)
       {
           scanf("%d",&a[i][j]);
           assert(-1000000000 <= a[i][j] && a[i][j] <= 1000000000);
       }
    }
    int q;
    scanf("%d",&q);
    assert(2 <= q && q <= 1000);
    while(q--)
    {
              int val;
              scanf("%d",&val);
              assert(-1000000000 <= val && val <= 1000000000);
              find(val,n,m);
    }
    //system("pause");
    return 0;
}